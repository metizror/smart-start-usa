{"version":3,"sources":["helper/donationhelper.js"],"names":["getPost","id","donationblock","filter","post","parseInt","getCategories","items","category","item","includes","getTags","tags","recentPost","timestamp","Date","postdate","getFilteredposts","posts","cat","tag","catgoryFilter","undefined","tagFilter","i","count","length","setCategoriesCount","today","slice","map","month","getTime","getDate","getMonth","getFullYear","setDemoDate"],"mappings":"s1vBAAA,yMAKA,SAASA,EAAQC,GACb,OAAOC,EAAcC,QAAO,SAAAC,GAAU,OAAOA,EAAKH,KAAOI,SAASJ,MAAO,GAG7E,SAASK,EAAcC,GAInB,OAHYC,EAASL,QAAO,SAACM,GACzB,OAAOF,EAAMG,SAASD,EAAKR,OAInC,SAASU,EAAQJ,GAIb,OAHYK,EAAKT,QAAO,SAACM,GACrB,OAAOF,EAAMG,SAASD,EAAKR,OA+BnC,SAASY,IAIL,OAHYX,EAAcC,QAAO,SAACM,GAC9B,OAAOA,EAAKK,UAAY,IAAIC,KAAKN,EAAKO,aAM9C,SAASC,EAAiBC,GAAuC,IAAhCf,EAA+B,uDAAtB,CAAEgB,IAAK,GAAIC,IAAK,IAClDC,OAA+BC,IAAfnB,EAAOgB,KAAoC,OAAfhB,EAAOgB,KAA+B,KAAfhB,EAAOgB,IAC1EI,OAA2BD,IAAfnB,EAAOiB,KAAoC,OAAfjB,EAAOiB,KAA+B,KAAfjB,EAAOiB,IAa1E,OAXIC,IACAH,EAAQA,EAAMf,QAAO,SAAAC,GACjB,YAA0BkB,IAAlBlB,EAAKI,UAA4C,OAAlBJ,EAAKI,UAAsBJ,EAAKI,SAASE,SAASL,SAASF,EAAOgB,UAI7GI,IACAL,EAAQA,EAAMf,QAAO,SAAAC,GACjB,YAAsBkB,IAAdlB,EAAKQ,MAAoC,OAAdR,EAAKQ,MAAkBR,EAAKQ,KAAKF,SAASL,SAASF,EAAOiB,UAG9FF,GAjDX,WACI,IAD2B,IAAD,WACjBM,GAELC,GADIA,EAAQvB,EAAcC,QAAO,SAAAC,GAAU,OAAOA,EAAKI,SAASE,SAASL,SAASG,EAASgB,GAAGvB,SAChFyB,OACdlB,EAASgB,GAAGC,MAAQA,GAHfD,EAAI,EAAGA,EAAIhB,EAASkB,OAAQF,IAAK,CAAC,IACnCC,EADkC,EAAjCD,IAMbG,GAOA,WACI,IAAIC,EAAQ,IAAIb,KAChBb,EAAc2B,MAAM,EAAG,GAAGC,KAAI,SAACrB,GAPnC,IAAuBsB,EAYf,OAJAtB,EAAKK,UAAYc,EAAMI,UAAa,OAGpCvB,EAAKO,SAAL,UAAmBY,EAAMK,UAAY,EAArC,aAXeF,EAWyCH,EAAMM,WAVrD,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC9GH,IASV,aAA8EH,EAAMO,eAC7E1B,KAGf2B,I","file":"static/js/6.acb13fb8.chunk.js","sourcesContent":["import donationblock from \"../data/donation/donation.json\";\r\nimport category from \"../data/donation/category.json\";\r\nimport tags from \"../data/donation/tags.json\";\r\n\r\n// Post details\r\nfunction getPost(id) {\r\n    return donationblock.filter(post => { return post.id === parseInt(id) })[0];\r\n}\r\n// Categroy\r\nfunction getCategories(items) {\r\n    var elems = category.filter((item) => {\r\n        return items.includes(item.id)\r\n    });\r\n    return elems;\r\n}\r\nfunction getTags(items) {\r\n    var elems = tags.filter((item) => {\r\n        return items.includes(item.id)\r\n    });\r\n    return elems;\r\n}\r\n// Count Category\r\nfunction setCategoriesCount() {\r\n    for (let i = 0; i < category.length; i++) {\r\n        var count = donationblock.filter(post => { return post.category.includes(parseInt(category[i].id)) });\r\n        count = count.length;\r\n        category[i].count = count;\r\n    }\r\n}\r\nsetCategoriesCount();\r\n// Recent post\r\nfunction changeToMonth(month) {\r\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    return months[month];\r\n}\r\n\r\nfunction setDemoDate() {\r\n    var today = new Date();\r\n    donationblock.slice(0, 4).map((item) => {\r\n        item.timestamp = today.getTime() - (3 * 24 * 60 * 60 * 1000);\r\n        // Remove this date on your live demo. This is only used for preview purposed. Your date should actually be updated\r\n        // in the blog.json object\r\n        item.postdate = `${today.getDate() - 2} ${changeToMonth(today.getMonth())}, ${today.getFullYear()}`;\r\n        return item;\r\n    });\r\n}\r\nsetDemoDate();\r\n\r\nfunction recentPost() {\r\n    var elems = donationblock.filter((item) => {\r\n        return item.timestamp < new Date(item.postdate);\r\n    });\r\n    return elems;\r\n}\r\n\r\n// Filter\r\nfunction getFilteredposts(posts, filter = { cat: '', tag: '' }) {\r\n    var catgoryFilter = filter.cat !== undefined && filter.cat !== null && filter.cat !== '';\r\n    var tagFilter = filter.tag !== undefined && filter.tag !== null && filter.tag !== '';\r\n    // Category filter\r\n    if (catgoryFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.category !== undefined && post.category !== null) && post.category.includes(parseInt(filter.cat))\r\n        })\r\n    }\r\n    // Tag filter\r\n    if (tagFilter) {\r\n        posts = posts.filter(post => {\r\n            return (post.tags !== undefined && post.tags !== null) && post.tags.includes(parseInt(filter.tag))\r\n        })\r\n    }\r\n    return posts;\r\n}\r\n\r\nexport { getPost, getCategories, getTags, recentPost ,getFilteredposts };\r\n\r\n"],"sourceRoot":""}